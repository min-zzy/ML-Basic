{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"2주차 실습 - 01. 이진 논리 회귀의 사본","provenance":[{"file_id":"1ElLU8rpS1vcbq3U75dcyQJe7GHNad8Bb","timestamp":1625574934020}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"P25KQA-p43Ev"},"source":["# 데이터셋 다운로드\n","\n","타이타닉 데이터셋: https://www.kaggle.com/heptapod/titanic"]},{"cell_type":"code","metadata":{"id":"wM_sZdYLyrPG","executionInfo":{"status":"ok","timestamp":1625574681746,"user_tz":-540,"elapsed":320,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}}},"source":["import os\n","os.environ['KAGGLE_USERNAME'] = 'minji0214' # username\n","os.environ['KAGGLE_KEY'] = 'd05e07ce26c951714662b0cb9fd98f8c' # key"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"4Rgbaw5Uyu60","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625574684644,"user_tz":-540,"elapsed":1159,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}},"outputId":"06a1a17b-8a79-41fe-cd9e-008ba78fb529"},"source":["!kaggle datasets download -d kandij/diabetes-dataset\n","!unzip diabetes-dataset.zip"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Downloading diabetes-dataset.zip to /content\n","\r  0% 0.00/8.92k [00:00<?, ?B/s]\n","\r100% 8.92k/8.92k [00:00<00:00, 15.7MB/s]\n","Archive:  diabetes-dataset.zip\n","  inflating: diabetes2.csv           \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2ASLmR4Gy1EA","executionInfo":{"status":"ok","timestamp":1625574704309,"user_tz":-540,"elapsed":3008,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}}},"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.optimizers import Adam, SGD\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt \n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VmA5477o5FDq"},"source":["# 데이터셋 로드"]},{"cell_type":"code","metadata":{"id":"_QeMWOyz4oZh","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1625574714827,"user_tz":-540,"elapsed":329,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}},"outputId":"5a963de3-ab39-4c34-92b6-f01c772a3d0d"},"source":["df = pd.read_csv('diabetes2.csv')\n","\n","df.head(5)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DiabetesPedigreeFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>148</td>\n","      <td>72</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>33.6</td>\n","      <td>0.627</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>26.6</td>\n","      <td>0.351</td>\n","      <td>31</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>183</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23.3</td>\n","      <td>0.672</td>\n","      <td>32</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>89</td>\n","      <td>66</td>\n","      <td>23</td>\n","      <td>94</td>\n","      <td>28.1</td>\n","      <td>0.167</td>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>137</td>\n","      <td>40</td>\n","      <td>35</td>\n","      <td>168</td>\n","      <td>43.1</td>\n","      <td>2.288</td>\n","      <td>33</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Pregnancies  Glucose  BloodPressure  ...  DiabetesPedigreeFunction  Age  Outcome\n","0            6      148             72  ...                     0.627   50        1\n","1            1       85             66  ...                     0.351   31        0\n","2            8      183             64  ...                     0.672   32        1\n","3            1       89             66  ...                     0.167   21        0\n","4            0      137             40  ...                     2.288   33        1\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"HrAgK4qZ5mHP"},"source":["## X, y 데이터 분할"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"8DHqVmqN0jLS","executionInfo":{"status":"ok","timestamp":1625574810814,"user_tz":-540,"elapsed":306,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}},"outputId":"adb0bef5-892c-4ac6-c0fc-b96e347f6800"},"source":["x_data = df.drop(columns=['Outcome'], axis=1)\n","x_data = x_data.astype(np.float32)\n","\n","x_data.head(5)"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DiabetesPedigreeFunction</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6.0</td>\n","      <td>148.0</td>\n","      <td>72.0</td>\n","      <td>35.0</td>\n","      <td>0.0</td>\n","      <td>33.599998</td>\n","      <td>0.627</td>\n","      <td>50.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>85.0</td>\n","      <td>66.0</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>26.600000</td>\n","      <td>0.351</td>\n","      <td>31.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8.0</td>\n","      <td>183.0</td>\n","      <td>64.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>23.299999</td>\n","      <td>0.672</td>\n","      <td>32.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>89.0</td>\n","      <td>66.0</td>\n","      <td>23.0</td>\n","      <td>94.0</td>\n","      <td>28.100000</td>\n","      <td>0.167</td>\n","      <td>21.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>137.0</td>\n","      <td>40.0</td>\n","      <td>35.0</td>\n","      <td>168.0</td>\n","      <td>43.099998</td>\n","      <td>2.288</td>\n","      <td>33.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Pregnancies  Glucose  ...  DiabetesPedigreeFunction   Age\n","0          6.0    148.0  ...                     0.627  50.0\n","1          1.0     85.0  ...                     0.351  31.0\n","2          8.0    183.0  ...                     0.672  32.0\n","3          1.0     89.0  ...                     0.167  21.0\n","4          0.0    137.0  ...                     2.288  33.0\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"FY6Wpaug0sz5","executionInfo":{"status":"ok","timestamp":1625574820043,"user_tz":-540,"elapsed":333,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}},"outputId":"98f552a1-d97b-44b4-c8d7-0fe8113dd5a1"},"source":["y_data = df[['Outcome']]\n","y_data = y_data.astype(np.float32)\n","\n","y_data.head(5)"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Outcome\n","0      1.0\n","1      0.0\n","2      1.0\n","3      0.0\n","4      1.0"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"GGG7GirU5qsy"},"source":["## 표준화 (Standardization)\n","\n","https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html\n","\n","z = (x - u) / s\n","\n","z = (x - 평균) / 표준편차"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C3DX5btu0xI6","executionInfo":{"status":"ok","timestamp":1625574830071,"user_tz":-540,"elapsed":315,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}},"outputId":"00dcdf02-35a0-4e80-8940-80181627cf10"},"source":["scaler = StandardScaler()\n","x_data_scaled = scaler.fit_transform(x_data)\n","\n","print(x_data.values[0])\n","print(x_data_scaled[0])"],"execution_count":9,"outputs":[{"output_type":"stream","text":["[  6.    148.     72.     35.      0.     33.6     0.627  50.   ]\n","[ 0.6399473   0.8483238   0.14964075  0.90726995 -0.6928905   0.20401257\n","  0.46849188  1.4259955 ]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HlPAz6Jf6KgB"},"source":["# 학습/검증 데이터 분할"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ehiJ3J1m00A9","executionInfo":{"status":"ok","timestamp":1625574838443,"user_tz":-540,"elapsed":322,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}},"outputId":"67ff0618-5861-4321-88db-48ed2a8d44e4"},"source":["x_train, x_val, y_train, y_val = train_test_split(x_data, y_data, test_size=0.2, random_state=2021)\n","\n","print(x_train.shape, x_val.shape)\n","print(y_train.shape, y_val.shape)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["(614, 8) (154, 8)\n","(614, 1) (154, 1)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JeDeJOCu6MLy"},"source":["# 모델 학습"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DdFgm6wP01vi","executionInfo":{"status":"ok","timestamp":1625574925230,"user_tz":-540,"elapsed":2117,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}},"outputId":"008cda54-d9dc-4dd4-db62-d15e5db721e7"},"source":["model = Sequential([\n","  Dense(1, activation='sigmoid')\n","])\n","\n","model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.01), metrics=['acc'])\n","\n","model.fit(\n","    x_train,\n","    y_train,\n","    validation_data=(x_val, y_val), # 검증 데이터를 넣어주면 한 epoch이 끝날때마다 자동으로 검증\n","    epochs=20 # epochs 복수형으로 쓰기!\n",")"],"execution_count":13,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/optimizer_v2/optimizer_v2.py:375: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  \"The `lr` argument is deprecated, use `learning_rate` instead.\")\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/20\n","20/20 [==============================] - 1s 10ms/step - loss: 24.1749 - acc: 0.6124 - val_loss: 18.0497 - val_acc: 0.5325\n","Epoch 2/20\n","20/20 [==============================] - 0s 2ms/step - loss: 16.0533 - acc: 0.5440 - val_loss: 10.7445 - val_acc: 0.6104\n","Epoch 3/20\n","20/20 [==============================] - 0s 3ms/step - loss: 8.9057 - acc: 0.5945 - val_loss: 4.5249 - val_acc: 0.6429\n","Epoch 4/20\n","20/20 [==============================] - 0s 2ms/step - loss: 3.4506 - acc: 0.6531 - val_loss: 2.6865 - val_acc: 0.6494\n","Epoch 5/20\n","20/20 [==============================] - 0s 3ms/step - loss: 2.5227 - acc: 0.6775 - val_loss: 2.5665 - val_acc: 0.6364\n","Epoch 6/20\n","20/20 [==============================] - 0s 3ms/step - loss: 2.2199 - acc: 0.6726 - val_loss: 2.0795 - val_acc: 0.6623\n","Epoch 7/20\n","20/20 [==============================] - 0s 3ms/step - loss: 1.8600 - acc: 0.6808 - val_loss: 2.0827 - val_acc: 0.6429\n","Epoch 8/20\n","20/20 [==============================] - 0s 3ms/step - loss: 1.7680 - acc: 0.6661 - val_loss: 1.6242 - val_acc: 0.6494\n","Epoch 9/20\n","20/20 [==============================] - 0s 2ms/step - loss: 1.4355 - acc: 0.6710 - val_loss: 1.2868 - val_acc: 0.6494\n","Epoch 10/20\n","20/20 [==============================] - 0s 2ms/step - loss: 1.2094 - acc: 0.6759 - val_loss: 1.0818 - val_acc: 0.6688\n","Epoch 11/20\n","20/20 [==============================] - 0s 2ms/step - loss: 0.9662 - acc: 0.6906 - val_loss: 0.9157 - val_acc: 0.6558\n","Epoch 12/20\n","20/20 [==============================] - 0s 3ms/step - loss: 0.8230 - acc: 0.6629 - val_loss: 0.8074 - val_acc: 0.6494\n","Epoch 13/20\n","20/20 [==============================] - 0s 3ms/step - loss: 0.8365 - acc: 0.6417 - val_loss: 1.1260 - val_acc: 0.6234\n","Epoch 14/20\n","20/20 [==============================] - 0s 2ms/step - loss: 0.7588 - acc: 0.6466 - val_loss: 0.7970 - val_acc: 0.6429\n","Epoch 15/20\n","20/20 [==============================] - 0s 3ms/step - loss: 0.6583 - acc: 0.6808 - val_loss: 0.6525 - val_acc: 0.6494\n","Epoch 16/20\n","20/20 [==============================] - 0s 3ms/step - loss: 0.6006 - acc: 0.7150 - val_loss: 0.6287 - val_acc: 0.6753\n","Epoch 17/20\n","20/20 [==============================] - 0s 3ms/step - loss: 0.6041 - acc: 0.7117 - val_loss: 0.6378 - val_acc: 0.6558\n","Epoch 18/20\n","20/20 [==============================] - 0s 2ms/step - loss: 0.6272 - acc: 0.6906 - val_loss: 0.7277 - val_acc: 0.5779\n","Epoch 19/20\n","20/20 [==============================] - 0s 2ms/step - loss: 0.6669 - acc: 0.6319 - val_loss: 0.6188 - val_acc: 0.6558\n","Epoch 20/20\n","20/20 [==============================] - 0s 3ms/step - loss: 0.6177 - acc: 0.6906 - val_loss: 0.6315 - val_acc: 0.6364\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f9b1a2f1b50>"]},"metadata":{"tags":[]},"execution_count":13}]}]}