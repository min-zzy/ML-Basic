{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"1주차 실습 - 01. 간단한 선형회귀 실습의 사본","provenance":[{"file_id":"1FksWe-MrejLcc4e4psqBAK9io8m3UYKo","timestamp":1625485682379}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"X97SlAsRBrOe"},"source":["# 초간단 Linear Regression 실습 (TensorFlow)\n","\n","TensorFlow 공식 가이드 문서: https://www.tensorflow.org/guide\n","\n","Keras 공식 가이드 문서: https://www.tensorflow.org/guide/keras/sequential_model\n","\n","현재 TensorFlow 는 아래 방식으로 구현하는 것을 권장하고 있지 않습니다. 강의에서는 선형 회귀의 이해를 돕기위해 아래의 코드를 사용했지만 TensorFlow에서는 keras 사용하도록 권장하고 있고 우리 강의에서도 **최신 트렌드에 맞게 keras를 사용**할 예정입니다!"]},{"cell_type":"code","metadata":{"id":"FABQeusq6k05","executionInfo":{"status":"ok","timestamp":1625391571978,"user_tz":-540,"elapsed":1025,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}}},"source":["import tensorflow as tf\n","\n","tf.compat.v1.disable_eager_execution()\n","\n","x_data = [[1, 1], [2, 2], [3, 3]]\n","y_data = [[10], [20], [30]]\n","\n","X = tf.compat.v1.placeholder(tf.float32, shape=[None, 2])\n","Y = tf.compat.v1.placeholder(tf.float32, shape=[None, 1])\n","\n","W = tf.Variable(tf.random.normal(shape=(2, 1)), name='W')\n","b = tf.Variable(tf.random.normal(shape=(1,)), name='b')"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"6CjakDv2CB4D","executionInfo":{"status":"ok","timestamp":1625392002761,"user_tz":-540,"elapsed":294,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}}},"source":["hypothesis = tf.matmul(X, W) + b  # Wx + b\n","cost = tf.reduce_mean(tf.square(hypothesis - Y))\n","optimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate=0.01).minimize(cost)"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"blnlq78UFEiW","executionInfo":{"status":"ok","timestamp":1625392228560,"user_tz":-540,"elapsed":690,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}},"outputId":"bcdbe2f4-02a6-443d-ecde-efa51196a571"},"source":["with tf.compat.v1.Session() as sess:\n","  sess.run(tf.compat.v1.global_variables_initializer())\n","\n","  for step in range(50):\n","    c, W_, b_, _ = sess.run([cost, W, b, optimizer], feed_dict={X: x_data, Y: y_data})\n","    print('Step: %2d\\t loss: %.2f\\t' % (step, c))\n","\n","  print(sess.run(hypothesis, feed_dict={X: [[4, 4]]}))"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Step:  0\t loss: 538.41\t\n","Step:  1\t loss: 341.59\t\n","Step:  2\t loss: 216.90\t\n","Step:  3\t loss: 137.90\t\n","Step:  4\t loss: 87.85\t\n","Step:  5\t loss: 56.13\t\n","Step:  6\t loss: 36.04\t\n","Step:  7\t loss: 23.31\t\n","Step:  8\t loss: 15.24\t\n","Step:  9\t loss: 10.13\t\n","Step: 10\t loss: 6.88\t\n","Step: 11\t loss: 4.83\t\n","Step: 12\t loss: 3.52\t\n","Step: 13\t loss: 2.69\t\n","Step: 14\t loss: 2.17\t\n","Step: 15\t loss: 1.83\t\n","Step: 16\t loss: 1.61\t\n","Step: 17\t loss: 1.47\t\n","Step: 18\t loss: 1.38\t\n","Step: 19\t loss: 1.32\t\n","Step: 20\t loss: 1.28\t\n","Step: 21\t loss: 1.26\t\n","Step: 22\t loss: 1.24\t\n","Step: 23\t loss: 1.22\t\n","Step: 24\t loss: 1.21\t\n","Step: 25\t loss: 1.20\t\n","Step: 26\t loss: 1.19\t\n","Step: 27\t loss: 1.18\t\n","Step: 28\t loss: 1.18\t\n","Step: 29\t loss: 1.17\t\n","Step: 30\t loss: 1.16\t\n","Step: 31\t loss: 1.16\t\n","Step: 32\t loss: 1.15\t\n","Step: 33\t loss: 1.14\t\n","Step: 34\t loss: 1.14\t\n","Step: 35\t loss: 1.13\t\n","Step: 36\t loss: 1.13\t\n","Step: 37\t loss: 1.12\t\n","Step: 38\t loss: 1.11\t\n","Step: 39\t loss: 1.11\t\n","Step: 40\t loss: 1.10\t\n","Step: 41\t loss: 1.10\t\n","Step: 42\t loss: 1.09\t\n","Step: 43\t loss: 1.09\t\n","Step: 44\t loss: 1.08\t\n","Step: 45\t loss: 1.07\t\n","Step: 46\t loss: 1.07\t\n","Step: 47\t loss: 1.06\t\n","Step: 48\t loss: 1.06\t\n","Step: 49\t loss: 1.05\t\n","[[38.00116]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"knqMJmBJI-zd"},"source":["# 초초초간단 Linear Regression 실습 (Keras)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dvD_mxONFiCy","executionInfo":{"status":"ok","timestamp":1625392240517,"user_tz":-540,"elapsed":1476,"user":{"displayName":"Anna !","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisoK6S3ZS4X9MJU-4gOEb-MPNJQcnBendrf4ectg=s64","userId":"17731284774928303452"}},"outputId":"6f9a13f5-15db-40dd-9058-66e426324903"},"source":["import numpy as np\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.optimizers import Adam, SGD\n","\n","x_data = np.array([[1], [2], [3]])\n","y_data = np.array([[10], [20], [30]])\n","\n","model = Sequential([\n","  Dense(1)\n","])\n","\n","model.compile(loss='mean_squared_error', optimizer=SGD(lr=0.1))\n","\n","model.fit(x_data, y_data, epochs=100) # epochs 복수형으로 쓰기!"],"execution_count":4,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/optimizer_v2/optimizer_v2.py:375: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  \"The `lr` argument is deprecated, use `learning_rate` instead.\")\n"],"name":"stderr"},{"output_type":"stream","text":["Train on 3 samples\n","Epoch 1/100\n","3/3 [==============================] - 0s 97ms/sample - loss: 493.0511\n","Epoch 2/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 7.8262\n","Epoch 3/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 1.9381\n","Epoch 4/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 1.7802\n","Epoch 5/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.6948\n","Epoch 6/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 1.6143\n","Epoch 7/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.5376\n","Epoch 8/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.4646\n","Epoch 9/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.3950\n","Epoch 10/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.3287\n","Epoch 11/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.2656\n","Epoch 12/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.2055\n","Epoch 13/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.1483\n","Epoch 14/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 1.0937\n","Epoch 15/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.0418\n","Epoch 16/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.9923\n","Epoch 17/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.9451\n","Epoch 18/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.9002\n","Epoch 19/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.8575\n","Epoch 20/100\n","3/3 [==============================] - 0s 956us/sample - loss: 0.8168\n","Epoch 21/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.7780\n","Epoch 22/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.7410\n","Epoch 23/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.7058\n","Epoch 24/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.6723\n","Epoch 25/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.6403\n","Epoch 26/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.6099\n","Epoch 27/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.5810\n","Epoch 28/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.5534\n","Epoch 29/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.5271\n","Epoch 30/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.5020\n","Epoch 31/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.4782\n","Epoch 32/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.4555\n","Epoch 33/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.4338\n","Epoch 34/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.4132\n","Epoch 35/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.3936\n","Epoch 36/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 0.3749\n","Epoch 37/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.3571\n","Epoch 38/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 0.3401\n","Epoch 39/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.3240\n","Epoch 40/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.3086\n","Epoch 41/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2939\n","Epoch 42/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2800\n","Epoch 43/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2667\n","Epoch 44/100\n","3/3 [==============================] - 0s 4ms/sample - loss: 0.2540\n","Epoch 45/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2419\n","Epoch 46/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 0.2304\n","Epoch 47/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 0.2195\n","Epoch 48/100\n","3/3 [==============================] - 0s 877us/sample - loss: 0.2091\n","Epoch 49/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1991\n","Epoch 50/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1897\n","Epoch 51/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1807\n","Epoch 52/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1721\n","Epoch 53/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1639\n","Epoch 54/100\n","3/3 [==============================] - 0s 997us/sample - loss: 0.1561\n","Epoch 55/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1487\n","Epoch 56/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1417\n","Epoch 57/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1349\n","Epoch 58/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1285\n","Epoch 59/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1224\n","Epoch 60/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1166\n","Epoch 61/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1111\n","Epoch 62/100\n","3/3 [==============================] - 0s 983us/sample - loss: 0.1058\n","Epoch 63/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1008\n","Epoch 64/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0960\n","Epoch 65/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0914\n","Epoch 66/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0871\n","Epoch 67/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 0.0829\n","Epoch 68/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 0.0790\n","Epoch 69/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0752\n","Epoch 70/100\n","3/3 [==============================] - 0s 974us/sample - loss: 0.0717\n","Epoch 71/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0683\n","Epoch 72/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0650\n","Epoch 73/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0619\n","Epoch 74/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0590\n","Epoch 75/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0562\n","Epoch 76/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0535\n","Epoch 77/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0510\n","Epoch 78/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0486\n","Epoch 79/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0462\n","Epoch 80/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0441\n","Epoch 81/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0420\n","Epoch 82/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0400\n","Epoch 83/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0381\n","Epoch 84/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0363\n","Epoch 85/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0345\n","Epoch 86/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0329\n","Epoch 87/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0313\n","Epoch 88/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0298\n","Epoch 89/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0284\n","Epoch 90/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0271\n","Epoch 91/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0258\n","Epoch 92/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0246\n","Epoch 93/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0234\n","Epoch 94/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0223\n","Epoch 95/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0212\n","Epoch 96/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0202\n","Epoch 97/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0193\n","Epoch 98/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0183\n","Epoch 99/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0175\n","Epoch 100/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0166\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fbc20fc5610>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"tfdDs3RITmpd"},"source":["## 테스트 데이터 예측하기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ci3Hu3-eJse-","executionInfo":{"status":"ok","timestamp":1613395861573,"user_tz":-540,"elapsed":864,"user":{"displayName":"Taehee Lee","photoUrl":"https://lh4.googleusercontent.com/--RT95Is--q8/AAAAAAAAAAI/AAAAAAAA7MQ/UAH2fPkrhmo/s64/photo.jpg","userId":"12017922817927484990"}},"outputId":"e2619f1a-dfef-4338-fbac-db4c8cf1b712"},"source":["y_pred = model.predict([[5]])\n","\n","print(y_pred)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[49.594902]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g3hH1c-kmhSz"},"source":[""],"execution_count":null,"outputs":[]}]}